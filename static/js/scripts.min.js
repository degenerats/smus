(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  this.Table = (function() {
    function Table(opt) {
      this.table = opt.table;
      this.current_url = window.location.origin + window.location.pathname;
    }

    Table.prototype.refreshTable = function() {
      this.table.bootstrapTable('destroy');
      return this.table.bootstrapTable();
    };

    Table.prototype.updateUrl = function(url) {
      return history.pushState({
        url: url
      });
    };

    Table.prototype.filterBySemester = function(select) {
      return window.location.href = window.location.origin + window.location.pathname + '?' + $(datepicker).serialize();
    };

    Table.prototype.getParams = function(request_params, is_remove) {
      var current_params, new_params;
      if (is_remove) {
        current_params = {};
      } else {
        current_params = $.getQueryParameters(window.location.search);
      }
      new_params = $.getQueryParameters(request_params);
      return $.param($.extend(current_params, new_params));
    };

    Table.prototype.ajaxRequest = function(params, is_semester_select) {
      var request_params, self;
      if (is_semester_select == null) {
        is_semester_select = false;
      }
      self = this;
      request_params = this.getParams(params, is_semester_select);
      return $.ajax(this.current_url, {
        data: request_params,
        beforeSend: (function(_this) {
          return function() {
            return _this.table.bootstrapTable('showLoading');
          };
        })(this),
        complete: function(xhr, status) {
          self.table.bootstrapTable();
          if (status === 'success') {
            return history.replaceState(null, null, this.url);
          }
        },
        success: (function(_this) {
          return function(data) {
            _this.table.bootstrapTable('destroy');
            return _this.table.html($(data).find("#" + (_this.table.attr('id'))).html());
          };
        })(this)
      });
    };

    return Table;

  })();

  this.AttendanceTable = (function(superClass) {
    extend(AttendanceTable, superClass);

    function AttendanceTable() {
      return AttendanceTable.__super__.constructor.apply(this, arguments);
    }

    AttendanceTable.prototype.showOnlyPercents = function(checkbox) {
      $('.fixed-table-header-columns').remove();
      $('.fixed-table-body-columns').remove();
      this.percent_checkbox = checkbox;
      if (this.percent_checkbox.checked) {
        return this.table.bootstrapTable('showColumn', 'attendance_all_subjects');
      } else {
        return this.table.bootstrapTable('hideColumn', 'attendance_all_subjects');
      }
    };

    AttendanceTable.prototype.refreshTable = function() {
      this.table.bootstrapTable('destroy');
      this.table.bootstrapTable();
      if (this.percent_checkbox) {
        this.percent_checkbox.checked = false;
      }
      if (this.select_subject) {
        return this.select_subject.selectpicker('val', 'all');
      }
    };

    AttendanceTable.prototype.filterBySubject = function(select) {
      if (select.value !== 'all') {
        return this.ajaxRequest($(select).serialize());
      } else {
        return window.location.search = window.location.search.replace(/&?subject=([^&]$|[^&]*)/i, "");
      }
    };

    AttendanceTable.prototype.filterByDate = function(datepicker) {
      return this.ajaxRequest($(datepicker).serialize());
    };

    AttendanceTable.prototype.initDatePicker = function(selector) {
      this.datepicker = $(selector);
      return this.datepicker.datepicker({
        language: 'ru'
      });
    };

    AttendanceTable.prototype.listenOnChangeDate = function() {
      return this.datepicker.on('changeDate', (function(_this) {
        return function() {
          return _this.filterByDate(_this);
        };
      })(this));
    };

    return AttendanceTable;

  })(this.Table);

  this.WorkTable = (function(superClass) {
    extend(WorkTable, superClass);

    function WorkTable() {
      return WorkTable.__super__.constructor.apply(this, arguments);
    }

    WorkTable.prototype.sortByProgress = function(a, b) {
      a = +$(a).find('.progress-bar').attr('aria-valuenow');
      b = +$(b).find('.progress-bar').attr('aria-valuenow');
      if (a > b) {
        return 1;
      }
      if (a < b) {
        return -1;
      }
      return 0;
    };

    return WorkTable;

  })(this.Table);

}).call(this);

//# sourceMappingURL=data:application/json;base64,
