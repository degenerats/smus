(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  this.Table = (function() {
    function Table(opt) {
      this.table = opt.table;
      this.current_url = window.location.origin + window.location.pathname;
    }

    Table.prototype.refreshTable = function() {
      this.table.bootstrapTable('destroy');
      return this.table.bootstrapTable();
    };

    Table.prototype.updateUrl = function(url) {
      return history.pushState({
        url: url
      });
    };

    Table.prototype.getParams = function(request_params) {
      var current_params, new_params;
      current_params = $.getQueryParameters(window.location.search);
      new_params = $.getQueryParameters(request_params);
      return $.param($.extend(current_params, new_params));
    };

    Table.prototype.ajaxRequest = function(params) {
      var request_params, self;
      self = this;
      request_params = this.getParams(params);
      return $.ajax(this.current_url, {
        data: request_params,
        beforeSend: (function(_this) {
          return function() {
            return _this.table.bootstrapTable('showLoading');
          };
        })(this),
        complete: function(xhr, status) {
          self.table.bootstrapTable();
          if (status === 'success') {
            return history.replaceState(null, null, this.url);
          }
        },
        success: (function(_this) {
          return function(data) {
            _this.table.bootstrapTable('destroy');
            return _this.table.html($(data).find("#" + (_this.table.attr('id'))).html());
          };
        })(this)
      });
    };

    return Table;

  })();

  this.AttendanceTable = (function(superClass) {
    extend(AttendanceTable, superClass);

    function AttendanceTable() {
      return AttendanceTable.__super__.constructor.apply(this, arguments);
    }

    AttendanceTable.prototype.showOnlyPercents = function(checkbox) {
      $('.fixed-table-header-columns').remove();
      $('.fixed-table-body-columns').remove();
      this.percent_checkbox = checkbox;
      if (this.percent_checkbox.checked) {
        return this.table.bootstrapTable('showColumn', 'attendance_all_subjects');
      } else {
        return this.table.bootstrapTable('hideColumn', 'attendance_all_subjects');
      }
    };

    AttendanceTable.prototype.refreshTable = function() {
      this.table.bootstrapTable('destroy');
      this.table.bootstrapTable();
      this.table.bootstrapTable('hideColumn', 'attendance_all_subjects');
      if (this.percent_checkbox) {
        this.percent_checkbox.checked = false;
      }
      if (this.select_subject) {
        return this.select_subject.selectpicker('val', 'all');
      }
    };

    AttendanceTable.prototype.filterBySubject = function(select) {
      if (select.value !== 'all') {
        return this.ajaxRequest($(select).serialize());
      } else {
        return window.location.search = window.location.search.replace(/&?subject=([^&]$|[^&]*)/i, "");
      }
    };

    AttendanceTable.prototype.filterByDate = function(select) {};

    AttendanceTable.prototype.filterBySemester = function(select) {};

    return AttendanceTable;

  })(this.Table);

  this.WorkTable = (function(superClass) {
    extend(WorkTable, superClass);

    function WorkTable() {
      return WorkTable.__super__.constructor.apply(this, arguments);
    }

    WorkTable.prototype.sortByProgress = function(a, b) {
      a = +$(a).find('.progress-bar').attr('aria-valuenow');
      b = +$(b).find('.progress-bar').attr('aria-valuenow');
      if (a > b) {
        return 1;
      }
      if (a < b) {
        return -1;
      }
      return 0;
    };

    return WorkTable;

  })(this.Table);

}).call(this);

//# sourceMappingURL=data:application/json;base64,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LGVBQU8sQ0FBQyxFQUF0Qjs7YUFDQTtJQUxjOzs7O0tBRE8sSUFBQyxDQUFBO0FBcEUxQiIsImZpbGUiOiJzY3JpcHRzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEBUYWJsZVxuICBjb25zdHJ1Y3RvcjogKG9wdCkgLT5cbiAgICBAdGFibGUgPSBvcHQudGFibGVcbiAgICBAY3VycmVudF91cmwgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lXG5cbiAgcmVmcmVzaFRhYmxlOiAoKSAtPlxuICAgIEB0YWJsZS5ib290c3RyYXBUYWJsZSgnZGVzdHJveScpXG4gICAgQHRhYmxlLmJvb3RzdHJhcFRhYmxlKClcblxuICB1cGRhdGVVcmw6ICh1cmwpIC0+XG4gICAgaGlzdG9yeS5wdXNoU3RhdGVcbiAgICAgIHVybDogdXJsXG5cbiAgZ2V0UGFyYW1zOiAocmVxdWVzdF9wYXJhbXMpIC0+XG4gICAgY3VycmVudF9wYXJhbXMgPSAkLmdldFF1ZXJ5UGFyYW1ldGVycyB3aW5kb3cubG9jYXRpb24uc2VhcmNoXG4gICAgbmV3X3BhcmFtcyA9ICQuZ2V0UXVlcnlQYXJhbWV0ZXJzIHJlcXVlc3RfcGFyYW1zXG4gICAgJC5wYXJhbSAkLmV4dGVuZChjdXJyZW50X3BhcmFtcywgbmV3X3BhcmFtcylcblxuICBhamF4UmVxdWVzdDogKHBhcmFtcykgLT5cbiAgICBzZWxmID0gQFxuICAgIHJlcXVlc3RfcGFyYW1zID0gQGdldFBhcmFtcyBwYXJhbXNcblxuICAgICQuYWpheCBAY3VycmVudF91cmwsXG4gICAgICBkYXRhOiByZXF1ZXN0X3BhcmFtcyxcbiAgICAgIGJlZm9yZVNlbmQ6ID0+XG4gICAgICAgIEB0YWJsZS5ib290c3RyYXBUYWJsZSAnc2hvd0xvYWRpbmcnXG4gICAgICBjb21wbGV0ZTogKHhociwgc3RhdHVzKSAtPlxuICAgICAgICBzZWxmLnRhYmxlLmJvb3RzdHJhcFRhYmxlKClcbiAgICAgICAgaWYgc3RhdHVzID09ICdzdWNjZXNzJ1xuICAgICAgICAgIGhpc3RvcnkucmVwbGFjZVN0YXRlIG51bGwsIG51bGwsIEAudXJsXG4gICAgICBzdWNjZXNzOiAoZGF0YSkgPT5cbiAgICAgICAgQHRhYmxlLmJvb3RzdHJhcFRhYmxlKCdkZXN0cm95JylcbiAgICAgICAgQHRhYmxlLmh0bWwoJChkYXRhKS5maW5kKFwiIyN7QHRhYmxlLmF0dHIoJ2lkJyl9XCIpLmh0bWwoKSlcblxuXG5jbGFzcyBAQXR0ZW5kYW5jZVRhYmxlIGV4dGVuZHMgQFRhYmxlXG5cbiAgc2hvd09ubHlQZXJjZW50czogKGNoZWNrYm94KSAtPlxuICAgICQoJy5maXhlZC10YWJsZS1oZWFkZXItY29sdW1ucycpLnJlbW92ZSgpICMgZml4IGR1cGxpY2F0ZWRcbiAgICAkKCcuZml4ZWQtdGFibGUtYm9keS1jb2x1bW5zJykucmVtb3ZlKCkgIyBmaXggZHVwbGljYXRlZFxuICAgIEBwZXJjZW50X2NoZWNrYm94ID0gY2hlY2tib3hcbiAgICBpZiBAcGVyY2VudF9jaGVja2JveC5jaGVja2VkXG4gICAgICBAdGFibGUuYm9vdHN0cmFwVGFibGUoJ3Nob3dDb2x1bW4nLCAnYXR0ZW5kYW5jZV9hbGxfc3ViamVjdHMnKVxuICAgIGVsc2VcbiAgICAgIEB0YWJsZS5ib290c3RyYXBUYWJsZSgnaGlkZUNvbHVtbicsICdhdHRlbmRhbmNlX2FsbF9zdWJqZWN0cycpXG5cbiAgcmVmcmVzaFRhYmxlOiAoKSAtPlxuICAgIEB0YWJsZS5ib290c3RyYXBUYWJsZSgnZGVzdHJveScpXG4gICAgQHRhYmxlLmJvb3RzdHJhcFRhYmxlKClcbiAgICBAdGFibGUuYm9vdHN0cmFwVGFibGUoJ2hpZGVDb2x1bW4nLCAnYXR0ZW5kYW5jZV9hbGxfc3ViamVjdHMnKVxuICAgIGlmIEBwZXJjZW50X2NoZWNrYm94XG4gICAgICBAcGVyY2VudF9jaGVja2JveC5jaGVja2VkID0gZmFsc2VcbiAgICBpZiBAc2VsZWN0X3N1YmplY3RcbiAgICAgIEBzZWxlY3Rfc3ViamVjdC5zZWxlY3RwaWNrZXIoJ3ZhbCcsICdhbGwnKVxuXG4gIGZpbHRlckJ5U3ViamVjdDogKHNlbGVjdCkgLT5cbiAgICBpZiBzZWxlY3QudmFsdWUgIT0gJ2FsbCdcbiAgICAgIEBhamF4UmVxdWVzdCAkKHNlbGVjdCkuc2VyaWFsaXplKClcbiAgICBlbHNlXG4gICAgICB3aW5kb3cubG9jYXRpb24uc2VhcmNoID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaC5yZXBsYWNlKC8mP3N1YmplY3Q9KFteJl0kfFteJl0qKS9pLCBcIlwiKVxuXG4gIGZpbHRlckJ5RGF0ZTogKHNlbGVjdCkgLT5cbiAgICAjIEFKQVggY2FsbCBoZXJlIGFuZCB0YWJsZSB1cGRhdGVcblxuICBmaWx0ZXJCeVNlbWVzdGVyOiAoc2VsZWN0KSAtPlxuICAgICMgQUpBWCBjYWxsIGhlcmUgYW5kIHRhYmxlIHVwZGF0ZVxuXG5cbmNsYXNzIEBXb3JrVGFibGUgZXh0ZW5kcyBAVGFibGVcbiAgc29ydEJ5UHJvZ3Jlc3M6IChhLCBiKSAtPlxuICAgIGEgPSArJChhKS5maW5kKCcucHJvZ3Jlc3MtYmFyJykuYXR0cignYXJpYS12YWx1ZW5vdycpXG4gICAgYiA9ICskKGIpLmZpbmQoJy5wcm9ncmVzcy1iYXInKS5hdHRyKCdhcmlhLXZhbHVlbm93JylcbiAgICBpZiBhID4gYiB0aGVuIHJldHVybiAxXG4gICAgaWYgYSA8IGIgdGhlbiByZXR1cm4gLTFcbiAgICAwXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
